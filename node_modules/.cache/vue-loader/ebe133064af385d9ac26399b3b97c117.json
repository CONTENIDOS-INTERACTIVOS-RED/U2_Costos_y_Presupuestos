{"remainingRequest":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/src/views/curso/Tema1.vue?vue&type=template&id=306659a4&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/src/views/curso/Tema1.vue","mtime":1736171648558},{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Costos_y_Presupuestos/U2_Costos_y_Presupuestos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}